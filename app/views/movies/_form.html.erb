<%= form_with model: movie, local: true, multipart: true do |f| %>
  <% if movie.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= t('movies.form_errors') %></h4>
      <ul class="mb-0">
        <% movie.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-8">
      <div class="mb-3">
        <%= f.label :title, class: "form-label" %>
        <%= f.text_field :title, class: "form-control", placeholder: t('movies.title_placeholder') %>
      </div>

      <div class="mb-3">
        <%= f.label :synopsis, class: "form-label" %>
        <%= f.text_area :synopsis, rows: 5, class: "form-control", placeholder: t('movies.synopsis_placeholder') %>
      </div>

      <div class="row">
        <div class="col-md-4">
          <div class="mb-3">
            <%= f.label :year, class: "form-label" %>
            <%= f.number_field :year, class: "form-control", 
                              min: 1900, max: Date.current.year + 5,
                              placeholder: Date.current.year %>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <%= f.label :duration, t('movies.duration_minutes'), class: "form-label" %>
            <%= f.number_field :duration, class: "form-control", min: 1, placeholder: "120" %>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <%= f.label :director, class: "form-label" %>
            <%= f.text_field :director, class: "form-control", placeholder: t('movies.director_placeholder') %>
          </div>
        </div>
      </div>

      <div class="mb-3">
        <%= f.label :category_ids, t('movies.categories'), class: "form-label" %>

        <div class="d-flex flex-wrap gap-2">
          <%= f.collection_check_boxes :category_ids, @categories, :id, :name do |b| %>
            <div class="mb-1">
              <%= b.check_box(class: "btn-check", id: "category_#{b.value}", autocomplete: "off") %>
              <%= b.label class: "btn btn-outline-primary", for: "category_#{b.value}" %>
            </div>
          <% end %>
        </div>

        <small class="form-text text-muted">
          <%= t('movies.select_categories_help') %>
        </small>
      </div>


    <div class="mb-3">
      <%= f.label :tag_ids, t('movies.tags'), class: "form-label" %>

      <div class="d-flex flex-wrap gap-2">
        <%= f.collection_check_boxes :tag_ids, @tags, :id, :name do |b| %>
          <div class="">
            <%= b.check_box(class: "btn-check", id: "tag_#{b.value}", autocomplete: "off") %>
            <%= b.label class: "btn btn-outline-primary", for: "tag_#{b.value}" %>
          </div>
        <% end %>
      </div>

      <small class="form-text text-muted">
        <%= t('movies.select_tags_help') %>
      </small>
    </div>

    </div>

    <div class="col-md-4">
      <div class="mb-3">
        <%= f.label :poster, t('movies.poster'), class: "form-label" %>
        <%= f.file_field :poster, class: "form-control", accept: "image/*" %>
        <%= f.hidden_field :ai_poster_url, id: "movie_ai_poster_url" %>
        <small class="form-text text-muted"><%= t('movies.poster_help') %></small>
      </div>

      <% if movie.poster.attached? %>
        <div class="mb-3">
          <p class="mb-2"><strong><%= t('movies.current_poster') %></strong></p>
          <%= image_tag movie.poster, class: "img-fluid rounded", style: "max-height: 200px;" %>
        </div>
      <% end %>

      <div class="card bg-light">
        <div class="card-body">
          <h6 class="card-title"><i class="fas fa-robot"></i> <%= t('movies.ai_helper') %></h6>
          <p class="card-text small">Use o botão abaixo para preencher os dados do filme.</p>
          <div class="d-grid gap-2 mb-2">
            <button type="button" id="fetch-ai-btn" class="btn btn-outline-primary">
              <i class="fas fa-edit"></i> Preencher com IA
            </button>
          </div>
          <div id="ai-loading" class="d-none">
            <div class="spinner-border spinner-border-sm" role="status">
              <span class="visually-hidden">Carregando...</span>
            </div>
            <span id="ai-loading-text">Buscando informações...</span>
          </div>
          <div id="ai-error" class="alert alert-warning d-none" role="alert"></div>
          <div id="ai-success" class="alert alert-success d-none" role="alert"></div>
        </div>
      </div>
    </div>
  </div>

  <div class="d-flex justify-content-between align-items-center">
    <div>
      <%= f.submit movie.persisted? ? t('movies.update') : t('movies.create'), 
                  class: "btn btn-primary" %>
      <%= link_to t('movies.cancel'), movie.persisted? ? movie : movies_path, 
                 class: "btn btn-secondary" %>
    </div>
    <% if movie.persisted? %>
      <%= link_to t('movies.delete'), movie, method: :delete, 
                 class: "btn btn-outline-danger", 
                 confirm: t('movies.delete_confirmation') %>
    <% end %>
  </div>
<% end %>

<script>
document.addEventListener('turbo:load', () => {
  const $ = id => document.getElementById(id);
  const fetchBtn = $('fetch-ai-btn');
  if (!fetchBtn) return;

  const loading = $('ai-loading');
  const loadingText = $('ai-loading-text');
  const errorDiv = $('ai-error');
  const successDiv = $('ai-success');
  const aiPosterField = $('movie_ai_poster_url');

  const toggle = (el, show = true) => el.classList.toggle('d-none', !show);

  const showMessage = (el, msg, success = false) => {
    el.innerHTML = success ? `<i class="fas fa-check"></i> ${msg}` : msg;
    toggle(el, true);
    toggle(success ? errorDiv : successDiv, false);
    if (success) setTimeout(() => toggle(el, false), 4000);
  };

  const setLoading = msg => {
    loadingText.textContent = msg || 'Processando...';
    toggle(loading, true);
    fetchBtn.disabled = true;
  };

  const stopLoading = () => {
    toggle(loading, false);
    fetchBtn.disabled = false;
  };

  const fillForm = data => {
    const fields = ['title', 'synopsis', 'year', 'duration', 'director'];
    fields.forEach(f => {
      const el = $(`movie_${f}`);
      if (el && data[f] && !el.value) el.value = data[f];
    });

    const checkValues = (selector, values) => {
      document.querySelectorAll(selector).forEach(box => {
        if (values?.some(v => box.nextElementSibling?.textContent.trim().toLowerCase() === v.toLowerCase())) {
          box.checked = true;
        }
      });
    };

    checkValues('input[name="movie[category_ids][]"]', data.categories);
    checkValues('input[name="movie[tag_ids][]"]', data.tags);
  };

  const showPoster = url => {
    let div = $('ai-poster-preview');
    if (!div) {
      div = document.createElement('div');
      div.id = 'ai-poster-preview';
      div.className = 'mb-3';
      document.querySelector('.col-md-4')?.appendChild(div);
    }
    div.innerHTML = `<img src="${url}" class="img-fluid rounded" style="max-height: 200px;" />`;
    if (aiPosterField) aiPosterField.value = url;
  };

  fetchBtn.addEventListener('click', async () => {
    const title = $('movie_title')?.value.trim();
    if (!title) return showMessage(errorDiv, 'Por favor, preencha o título do filme.');

    setLoading('Buscando dados do filme com IA...');
    try {
      const res = await fetch('<%= fetch_ai_data_movies_path %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({ title })
      });

      const data = await res.json();
      stopLoading();

      if (data.success && data.data) {
        fillForm(data.data);
        showMessage(successDiv, 'Campos preenchidos com IA! Confira e edite se necessário.', true);
        if (data.data.poster_url) showPoster(data.data.poster_url);
      } else {
        showMessage(errorDiv, data.error || 'Erro ao buscar dados da IA.');
      }
    } catch {
      stopLoading();
      showMessage(errorDiv, 'Erro de conexão. Tente novamente.');
    }
  });
});
</script>